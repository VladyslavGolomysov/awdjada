import random
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor

API_TOKEN = 'API_TOKEN'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

correct_answers = 0
incorrect_answers = 0
max_incorrect_answers = 5 

def generate_task():
    num1 = random.randint(1, 20)
    num2 = random.randint(1, 20)
    operation = random.choice(['+', '-', '*', '/'])
    if operation == '+':
        result = num1 + num2
    elif operation == '-':
        result = num1 - num2
    elif operation == '*':
        result = num1 * num2
    elif operation == '/':
        result = num1 / num2
        result = round(result, 2)
    task_text = f"–í—ã–±–µ—Ä–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Çüòä {num1} {operation} {num2}?"
    return task_text, result

async def start_game(message):
    global correct_answers, incorrect_answers
    correct_answers = 0
    incorrect_answers = 0

    await message.answer("–≠—Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —è –ø–æ–∑–æ–≤—É —Ç–≤–æ–µ–≥–æ –±–∞—Ç—é, –∏ –æ–Ω —Ç–µ–±—è –æ—Ç–ø–æ—Ä–µ—Ç —Ä–µ–º–Ω–µ–ºüòà")

    while incorrect_answers < max_incorrect_answers:
        task_text, correct_result = generate_task()
        await message.answer(task_text)

        try:
            response = await bot.wait_for(types.Message, timeout=30)
            user_answer = response.text

            if user_answer.isdigit() or (user_answer.count('.') == 1 and user_answer.replace('.', '').isdigit()):
                user_answer = float(user_answer) if '.' in user_answer else int(user_answer)

                if user_answer == correct_result:
                    correct_answers += 1
                    await message.answer("–ê —Ç—ã —É–º–Ω—ã–π, –º–æ–ª–æ–¥–µ—ÜüôÑ")
                else:
                    incorrect_answers += 1
                    await message.answer(f"–•–ê–•–ê–•–ê–•–ê–•–ê–•–•, –õ–û–•üòπ, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_result}")
            else:
                await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ —É–∂–µ –Ω–∞–∫–æ–Ω–µ—Ü —Ç–æ!üë∫")

        except asyncio.TimeoutError:
            await message.answer("–ù–µ, –º–Ω–µ –Ω–∞–¥–æ–µ–ª–æ –∂–¥–∞—Ç—å, –ª–∏–±–æ –∏–≥—Ä–∞–µ—à—å, –ª–∏–±–æ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—à—å –æ—Ç —Å—é–¥–∞üòæ")
            break

    await message.answer(f"–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤{max_incorrect_answers},(1-2(–ù–µ –ø–ª–æ—Ö)), (3(–ø–ª–æ—Ö)), (4-5(–õ–û–û–û–û–•–•–•))")
    await message.answer(f"–¢–≤–æ—è –æ—Ü–µ–Ω–æ—á–∫–∞ –ø—É–ø—Å–∏–∫üòΩüíã{correct_answers}<=–ü—Ä–∞–≤–∏–ª—å–Ω—ñ–µ –æ—Ç–≤–µ—Ç—ã, {incorrect_answers}<=–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ãüëéü§Æ")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É), –ê –¢–ï–ü–ï–†–¨ –í–ê–õ–ò –û–¢ –°–Æ–î–êü§¨")

if __name__ == '__main__':
    from aiogram import executor

    @dp.message_handler(commands=['start'])
    async def on_start(message: types.Message):
        await start_game(message)

    executor.start_polling(dp, skip_updates=True)